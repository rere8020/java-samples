Collection classes have a method iterator()

Iterator allows us to iterate through a collection, it has three methods
hasNext() - checks for any remaining elements in collection
next() - returns


Linked list - slower for reading but better for adding data. Reading it needs to start from the
beginning and go through all the elements. To modify it just modifies the element address pointer.

Array list - for searching is faster because it goes straight to the location of the element address

List<Integer> arrayList = new ArrayList<>();
List = interface //implementing this interface
<> = generic inside you put the class of which objects you want to use, if you use String it will
use memory to strong everything that the String class can do, all the methods.
Integer = object, can't use int. To use the same data type

Tasks
1. Create a class Insurance that will have an attribute as insuranceName and unimplemented
behaviour as getQuote and cancelInsurance. Create 3 subclasses Car, Pet, Health.
Car class has it’s own attribute as carModel and Class Pet has petType attribute.
Create 3 objects of the sub classes and store them in ArrayList. Using for loop/advanced
for loop/ iterator access all methods of the class.

2. Create a Card class that will have implemented  and unimplemented methods and a constructor
that will initializes credit card type.  Create 3 subclasses of a Card card. Create 3 objects
of different card and store them into LinkedList. Using for loop/advanced for loop/ iterator
access all methods of the class.

How can you remove all duplicates from ArrayList?
List<String> aList=new ArrayList<>();
aList.add("John");
aList.add("Jane");
aList.add("James");
aList.add("Jasmine");
aList.add("Jane");
aList.add("James");

1. Create a Set collection in which you need to add names of the countries. In this set
we want all objects to be sorted in alphabetical order. Using 2 different ways retrieve
all elements from set.
2. Create a Set of cities in which you want to make sure that insertion order is maintained.
Then remove any city that starts with “A”;
3. Create a Set collection that will hold Objects of Student Type. In this set we do not
care about the insertion order. Each student object should have name and studentID.
Display name of each student.

